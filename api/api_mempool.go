/*
 * Rosetta
 *
 * A standard for blockchain interaction
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"
)

// A MempoolApiController binds http requests to an api service and writes the service results to the http response
type MempoolApiController struct {
	service MempoolApiServicer
}

// NewMempoolApiController creates a default api controller
func NewMempoolApiController(s MempoolApiServicer) Router {
	return &MempoolApiController{ service: s }
}

// Routes returns all of the api route for the MempoolApiController
func (c *MempoolApiController) Routes() Routes {
	return Routes{ 
		{
			"Mempool",
			strings.ToUpper("Post"),
			"/mempool",
			c.Mempool,
		},
		{
			"MempoolTransaction",
			strings.ToUpper("Post"),
			"/mempool/transaction",
			c.MempoolTransaction,
		},
	}
}

// Mempool - Get All Mempool Transactions
func (c *MempoolApiController) Mempool(w http.ResponseWriter, r *http.Request) { 
	mempoolRequest := &MempoolRequest{}
	if err := json.NewDecoder(r.Body).Decode(&mempoolRequest); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.Mempool(*mempoolRequest)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// MempoolTransaction - Get a Mempool Transaction
func (c *MempoolApiController) MempoolTransaction(w http.ResponseWriter, r *http.Request) { 
	mempoolTransactionRequest := &MempoolTransactionRequest{}
	if err := json.NewDecoder(r.Body).Decode(&mempoolTransactionRequest); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.MempoolTransaction(*mempoolTransactionRequest)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
