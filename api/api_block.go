/*
 * Rosetta
 *
 * A standard for blockchain interaction
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A BlockApiController binds http requests to an api service and writes the service results to the http response
type BlockApiController struct {
	service BlockApiServicer
}

// NewBlockApiController creates a default api controller
func NewBlockApiController(s BlockApiServicer) Router {
	return &BlockApiController{ service: s }
}

// Routes returns all of the api route for the BlockApiController
func (c *BlockApiController) Routes() Routes {
	return Routes{ 
		{
			"Block",
			strings.ToUpper("Post"),
			"/block",
			c.Block,
		},
		{
			"BlockTransaction",
			strings.ToUpper("Post"),
			"/block/transaction",
			c.BlockTransaction,
		},
	}
}

// Block - Get a Block
func (c *BlockApiController) Block(w http.ResponseWriter, r *http.Request) { 
	blockRequest := &BlockRequest{}
	if err := json.NewDecoder(r.Body).Decode(&blockRequest); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.Block(*blockRequest)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// BlockTransaction - Get a Block Transaction
func (c *BlockApiController) BlockTransaction(w http.ResponseWriter, r *http.Request) { 
	blockTransactionRequest := &BlockTransactionRequest{}
	if err := json.NewDecoder(r.Body).Decode(&blockTransactionRequest); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.BlockTransaction(*blockTransactionRequest)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
