openapi: 3.0.2
info:
  description: A standard for blockchain interaction
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Rosetta
  version: 1.2.3
  x-logo:
    url: https://www.centre.io/images/usdc/logos/coinbase-2019-0615383b8a.png
servers:
- url: http://localhost
tags:
- description: "The first challenge of reliably supporting a blockchain integration\
    \ is to seamlessly deploy a set of nodes\nto connect to the network. Typically,\
    \ this includes working with blockchain teams to understand how to\nautomate node\
    \ deployment, populate configuration files, and set runtime flags. Once configured,\n\
    this deployment strategy must be maintained across software updates.\n\nIn Rosetta,\
    \ blockchain teams must create and maintain a single Dockerfile (referencing\n\
    any number of <a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\"\
    >build stages</a>)\nthat starts the node runtime and all of its dependent services\
    \ without human intervention.\n\n<h3>Requirements</h3>\n<h4>Dockerfile</h4>\n\
    There are many projects that allow you to configure and manage the automated deployment\
    \ of a service. From our experience,\nwe have found that the small learning curve,\
    \ mature tooling, generality, and widespread ecosystem support of\n<a href=\"\
    https://docs.docker.com/get-docker\">Docker</a> make for a relatively painless\
    \ and sufficiently\nreliable deployment.\n\nUpon first glance, using a single\
    \ Dockerfile to start all services required by the node may sound antithetical\n\
    to best practices. However, we have found that restricting blockchain node deployment\
    \ to a\nsingle container makes the orchestration of multiple nodes much easier\
    \ because of coordinated start/stop and\nsingle volume mounting.\n\n<h5>Coordinated\
    \ Start/Stop</h5>\nSome blockchain nodes and their dependent services must be\
    \ started and stopped in some explicit order\nto function correctly and prevent\
    \ corruption. With distributed services (in multiple containers),\nthis sequencing\
    \ of operations can require a custom deployer for each network. Building and maintaining\n\
    these deployers can take a lot of communication with asset issuers and a lot of\
    \ testing to ensure\ncorrectness. It is easier to just utilize a script imported\
    \ into the Dockerfile\nthat can start and stop the node(and its dependent services)\
    \ correctly.\n\n<h5>Single Volume Mounting</h5>\nWhen a deployment is started\
    \ from a single Dockerfile it is straightforward to\nmount a single volume to\
    \ the new container and manage all of its state. Node deployments\ncan be easily\
    \ scaled by duplicating this volume to any number of new hosts without\nany sophisticated\
    \ tooling. As mentioned previously, coordinated start/stop of all\nservices provides\
    \ strong guarantees around the corruption of the state that would\nbe much more\
    \ difficult to achieve with distributed services as there may be specific\nordering\
    \ restrictions to prevent corruption.\n\nRunning multiple instances of a node\
    \ configuration can get complicated quickly if the node\nutilizes multiple stateful\
    \ containers (ex: a node that stores historical state in an external database).\n\
    In this scenario, the node orchestration engine must manage which node deployment\
    \ talks to\nwhich services based on which state the node runtime is in. Furthermore,\
    \ it is more time-intensive\nto scale up a node deployment as a deployment and\
    \ all its services must be synced from scratch to ensure correctness\nor the volumes\
    \ of another deployment's stateful containers must be used to bootstrap the new\
    \ deployment\n(which can be a manual procedure).\n\n<h4>Persistent Data Storage</h4>\n\
    All persistent data must be written to the <code>/data</code> directory. If your\
    \ node utilizes a database (like Postgres)\nto store data reliably, ensure this\
    \ is configured to save information to this directory (and in a manner that would\
    \ not corrupt\nany data stored by the core node process or other necessary services).\
    \ It should be possible to stop all services defined\nin the Dockerfile and restart\
    \ them (without corruption) using only the state stored in this <code>/data</code>\
    \ directory\nwith a single command.\n\n<h4>Configurable Storage Pruning</h4>\n\
    It must be possible to prune persistent data storage using block number. For example,\n\
    anyone running your node should be able to configure the node to delete blocks\
    \ that are\nover 1000 blocks old. \n"
  name: Automated Node Deployment
- description: |
    The second challenge of reliably supporting a blockchain integration is correctly and efficiently communicating with a
    deployed node. This communication (fetching block data, retrieving account state, submitting transactions, etc) often requires
    a myriad of network-specific strategies that must be discussed with a blockchain team to ensure correctness.
    Once complete, these integrations require constant maintenance to ensure software upgrades do not cause unintended
    behavior, data irregularities, or degradations in performance.

    In Rosetta, blockchain teams must implement a server that adheres to the Rosetta Interface (described in the
    following sections). Blockchain teams that do not wish to modify their node's interface may alternatively
    choose to write a middleware server that communicates with the node to provide clients with access to the
    Rosetta Interface.

    <h3>Design Principles</h3>
    <i>Before reading this section, it may be helpful to familiarize yourself with <a href="/#tag/Objects">Rosetta Objects</a>.</i>

    <h4>No Predefined Operation Types</h4>
    The Rosetta interface does not restrict implementations to use a predefined set of types to describe network-specific activity.
    For example, <code>PAYMENT</code> could be a predefined type that could be required for all implementers to apply to network-specific
    transactions. While this sounds appealing and feasible for a simple type like <code>PAYMENT</code>, the task of producing such a set
    of types can quickly become very complex and controversial. Instead, the interface puts the burden on the client to apply
    whatever types they feel best apply to the standardized <code>Operations</code> that compose each transaction.

    <h4>Signed Operation Amounts</h4>
    Although there are no predefined <code>Operation</code> types in the interface, an explicit attempt is made to make balance
    reconciliation much easier: using signed <code>Operation</code> amounts. This means that all operations within a transaction
    must clearly specify the balance change that results from that operation are explicitly credit or debits to a
    specified account.

    <h4>Single Party, Linked Operations</h4>
    All <code>Operations</code> in the interface can affect at most 1 account but can be linked to any number of other <code>Operations</code>.
    To represent network-specific operations that are inherently multi-participant (a network-specific transfer that has
    a sender and recipient specified in a single op), this entails creating an explicit operation for each account involved.
    At a high-level, this means reducing account-based blockchains to something resembling ledger accounting (all credits have debits).
    While this approach may seem burdensome for simple payments, the generality of this design allows for capturing the
    structure of complicated on-chain interactions more closely to how they are represented natively on-chain without imposing more restrictions
    on the <code>Operation</code> model. This single operation abstraction for all accounting types also means that downstream
    processing does not require conditional parsing on different operation abstractions.

    <h4>Operation Status, Not Transaction Status</h4>
    Indication of status on the <code>Transaction</code> implies that all <code>Operations</code> within that
    <code>Transaction</code> atomically succeed or fail. While this is often true on blockchains without smart contracting,
    it is not always the case on blockchains that support generalized smart contracting. In Ethereum,
    transactions can fail anytime during execution and changes are only rolled back when explicitly
    indicated to do so in the smart contract itself. Requiring that implementers have atomic transaction
    success/failure is a pretty heavy handed restriction that could limit innovation.

    <h4>Transaction Fees are Just Operations</h4>
    For blockchains where there is no explicit fee payer, where there are multiple fee payers, where fees can be paid in multiple
    currencies, or where fee payment is made by one of many parties in a transaction, it becomes complicated to represent
    a fee payment as a <code>Transaction</code> property. Thus, all <code>Transaction</code> fees are represented exclusively as <code>Operations</code>.

    <h4>Sharded Blockchain Support</h4>
    Many new blockchains are utilizing a sharded design to offer increased scalability. It is critical that this interface treats
    these blockchains as first-class citizens, albeit in a generalized manner. The interface introduces the idea of <code>SubNetworks</code>
    to identify specific portions of the network that can be used to qualify a fetch of blocks or state.

    <h4>Staking and Smart Contract Support</h4>
    In blockchains with generalized smart contracting, the notion of account state can be much more nuanced than a single token balance
    at a single height. The interface introduces <code>SubAccounts</code> to identify state that is specific to a certain contract or lockup period
    (ex: delegated stake). Each account can have an array of balances that are uniquely identified by a <code>SubAccount</code>.

    <h4>JSON-Based RPC Protocol</h4>
    When working on this interface, we considered many interface specification formats that have gained popularity in recent years
    (like <a href="https://grpc.io">Protobuf + gRPC</a> and <a href="https://avro.apache.org/docs/current">Avro</a>) but found most only
    had strong support for a few programming languages, required users to have enough programming experience to know how to use autogenerated
    code to encode/decode some binary format, and/or <a href="https://grpc.io/blog/state-of-grpc-web">didn't work well in the browser</a>.

    The Rosetta interface is specified in the <a href="https://www.openapis.org">OpenAPI format (formerly known as Swagger)</a>. Requests
    and responses can be crafted with autogenerated code using <a href="https://swagger.io/tools/swagger-codegen">Swagger Codegen</a> or
    <a href="https://openapi-generator.tech">OpenAPI Generator</a> (but don't have to be), are human-readable (easy to debug and understand),
    and can be used in servers and browsers. Using JSON incurs some performance penalty, however, we have found the challenge of robust
    integration to be a much more painful issue than mitigating JSON overhead.

    Due to the complexity of requests (which can often contain a number of parameters of unspecified size), all communication with
    the Rosetta Interface Server utilizes <b>POST</b> requests. This makes the interface much closer to
    <a href="https://www.jsonrpc.org/specification">JSON-RPC 2.0</a> with the exception that requests go to specific paths instead
    of using methods. If you have used gRPC, it will feel very familiar.

    <h3>Requirements</h3>
    <i>These requirements must be satisfied in any Rosetta Interface Server implementation.</i>

    <h4>Return All Balance-Changing Operations</h4>
    A Rosetta Interface Server implementation must return all balance-changing operations in a block.
    Some clients compare the balance computed from all of an account's block operations with the
    balance returned for an account by the node itself. If these balances do not match (reconcile) for any account,
    these clients will not be able to integrate with your blockchain.

    There is only one known exception to this requirement: staking reward distribution in Proof-of-Stake blockchains that separate
    an account's "staked" balance from their "transferable" balance. In these blockchains, staking rewards accrue in each
    staking account's "staked" balance but can't be transferred until they are explicitly withdrawn to an account's "transferable" balance.
    If this applies to your blockchain, it is okay to only return an account's transfer into their "staked" balance (often called a
    "delegation") and the transfer from the "staked" balance into the "transferable" balance (often called "undelegation") after rewards
    have been accrued. No events recording the increase of the "staked" balance on each block must be returned.
    However, it must still be possible to fetch the current value of a "staked" balance in the `/account/balance` endpoint. Blockchains
    that distribute rewards into an account's "transferable" balance must return all such events for all accounts.
  name: RPC Service Interface
- description: |
    <ul>
      <li><b>Interface Validation Tooling:</b> Easy tool to run during development to find areas of implementation that don't adhere
      to the published interface standards.
      <li><b>Autogenerated Clients:</b> Provide autogenerated clients in a variety of common languages so users of this interface don't
      need to investigate the autogeneration toolchain.</li>
      <li><b>Reference Implementations:</b> Demonstrate how a Rosetta Server implementation would look and how a basic block explorer
      on top of the Rosetta interface could be built.</li>
      <li><b>Explorer Methods:</b> Add common explorer methods to the interface (like fetching transaction by hash or all transactions
      for an account). It is likely that these methods would be used extensively by wallets or client-side explorers. These methods
      will most likely require an additional database to serve queries efficiently.</li>
      <li><b>Performance Benchmarking:</b> Record performance changes from each implementation modification.</li>
      <li><b>Transaction Construction:</b> Add an extension to the interface that specifies methods used to construct network-specific
      transactions using only Rosetta standardized types.</li>
    </ul>
  name: Future Work
- description: |
    <h2>Block</h2>
    <SchemaDefinition schemaRef="#/components/schemas/Block" />

    <h2>Transaction</h2>
    <SchemaDefinition schemaRef="#/components/schemas/Transaction" />

    <h2>Operation</h2>
    <SchemaDefinition schemaRef="#/components/schemas/Operation" />

    <h2>Balance</h2>
    <SchemaDefinition schemaRef="#/components/schemas/Balance" />

    <h2>Amount</h2>
    <SchemaDefinition schemaRef="#/components/schemas/Amount" />

    <h2>Currency</h2>
    <SchemaDefinition schemaRef="#/components/schemas/Currency" />
  name: Objects
- description: |
    <h2>Network Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/NetworkIdentifier" />

    <h2>Sub-Network Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/SubNetworkIdentifier" />

    <h2>Block Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/BlockIdentifier" />

    <h2>Transaction Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/TransactionIdentifier" />

    <h2>Operation Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/OperationIdentifier" />

    <h2>Account Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/AccountIdentifier" />

    <h2>Sub-Account Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/SubAccountIdentifier" />

    <h2>Account Identifier</h2>
    <SchemaDefinition schemaRef="#/components/schemas/AccountIdentifier" />
  name: Object Identifiers
- description: |
    <i>Network Methods</i> are used when first connecting to a Rosetta endpoint to determine which network and subnetworks are supported,
    the current status (the most recent processed block) of the network, and any other useful metadata the server
    wants to provide (ex: version).
  name: Network
- description: |
    <i>Block Methods</i> are used to access any data stored in a block. It is <b>critical</b> that these methods can be used to fetch
    <b>all</b> balance-changing operations in a block. If this is not possible, clients that reconcile balances on accounts they
    care about will not be able to use the implemented interface.

    Balance reconciliation, in this scenario, means comparing what balance the node returns for an account
    with the balance that can be calculate from looking at all the account's transactions.
  name: Block
- description: |
    <i>Mempool Methods</i> are used to fetch any data stored in the mempool. Note that there are 2 endpoints to fetch transaction
    information (transactions in a block and transaction in the mempool).
  name: Mempool
- description: |
    <i>Account Methods</i> are used to fetch the state of an account (identified by a network-specific identifier).
  name: Account
- description: |
    <i>Construction Methods</i> are used to retrieve metadata needed for an account to construct a transaction and used to submit
    signed transactions. Transaction construction and signing is currently outside the scope of Rosetta.
  name: Construction
- description: "<h2>1.2.3</h2>\n<ul>\n  <li><b>Make \"Version\" Object:</b> Create\
    \ an object to return node and server version instead of using an\n  inline object\
    \ definition.</li>\n</ul>\n<h2>1.2.2</h2>\n<ul>\n  <li><b>Modify \"NetworkStatus\"\
    \ Model for Multiple Sub-Networks Support:</b> In 1.2.1 it was not possible to\
    \ return\n  multiple \"SubNetworkStatus\" in the <code>/network/status</code>\
    \ method. This prevented sharded blockchains from\n  providing sufficient information\
    \ to clients.</li>\n  <li><b>Add \"network_index\" to OperationIdentifier:</b>\
    \ Some blockchains have a <code>network_index</code> on\n  their operations that\
    \ is essential for client use. For example, Bitcoin uses a `network_index` to\
    \ identify\n  which UTXO was used in a transaction.</li>\n</ul>\n<h2>1.2.1</h2>\n\
    <ul>\n  <li><b>Add Timestamp to \"NetworkStatus\":</b> In node orchestration,\
    \ it is often useful to know the timestamp\n  of the current block.</li>\n  <li><b>Return\
    \ Metadata with Mempool Transaction:</b> Mempool transactions may carry additional\
    \ metadata\n  describing their priority to be included in a block or their descendant\
    \ transactions (ex: CPFP in Bitcoin).</li>\n  <li><b>Accept Method in Transaction\
    \ Construction:</b> Different methods may require different metadata for\n  construction.</li>\n\
    </ul>\n<h2>1.2.0</h2>\n<ul>\n  <li><b>Require BlockIdentifier in /block/transaction\
    \ method:</b> To correctly parse a transaction, it is often necessary to\n  reference\
    \ the block that includes the specified transaction. For example, in Bitcoin it\
    \ is necessary to know which block\n  contains a transaction to determine which\
    \ miner should receive fee payments. Without specifying a block identifier, the\
    \ node\n  would have to infer which block to use (which could change during a\
    \ re-org). Albeit more restrictive, the interface now\n  requires providing a\
    \ <code>BlockIdentifier</code> in <code>/block/transaction</code> interactions\
    \ to eliminate this\n  ambiguity. This change is a good opportunity to clarify\
    \ that this interface is not attempting to force all nodes to \n  become block\
    \ explorers. Rather, this interface is focused on making block data extraction\
    \ and transaction submission\n  standardized. The interface could be extended\
    \ at some point to define optional \"Explorer Methods\", but this is outside\n\
    \  the scope of the current specification.</li>\n  <li><b>Remove /account/transactions\
    \ method:</b> This method often requires additional indexing in the node to answer\n\
    \  efficiently. This method will be included as a method in \"Explorer Methods\"\
    \ (outlined in the \"Future Work\" section).\n  <li><b>Change Gateway Methods\
    \ to Network Methods:</b> Change name of \"Gateway Methods\" to \"Network Methods\"\
    \ and change\n  return type of <code>/network/status</code> to an object instead\
    \ of an array of networks.</li>\n</ul>\n<h2>1.1.6</h2>\n<ul>\n  <li><b>Remove\
    \ \"Cache Integration\" from the \"Future Work\" Section:</b> Originally, there\
    \ was a plan to allow clients to provide\n  prefetched, raw data to a Rosetta\
    \ Server for parsing instead of requiring the Rosetta Server to interact with\
    \ a node. \n  This would have required the client to know nuanced details about\
    \ how a Rosetta Server implementation parsed data (to know\n  which data to provide)\
    \ and which versions of raw data were compatible with a specific implementation\
    \ version.\n  Instead, it was decided that any \"cache-like\" enhancements (storing\
    \ UTXOs for an account) should be handled opaquely\n  by the Rosetta Server if\
    \ certain methods are not performant. Cached data should be stored in the same\
    \ directory as node data.\n  \n  <li><b>Simplify BlockIdentifier:</b> Remove <code>previous_hash</code>\
    \ from <code>BlockIdentifier</code> and add a \n  <code>parent_block_identifier</code>\
    \ property to objects that depend on knowing the hash of the parent block.</li>\n\
    \n  <li><b>Add PartialBlockIdentifier:</b>  In previous versions, requests that\
    \ included a <code>BlockIdentifier</code>\n  (like <code>/block</code>) indicated\
    \ that it was required to provide the <code>hash, index, and previous_hash</code>.\n\
    \  This has been relaxed to now be either an <code>index</code> or <code>hash</code>.\
    \ If neither is provided,\n  it is assumed that the client is specifying the current\
    \ block.</li>\n\n  <li><b>Add Genesis Block Identifier to NetworkStatus:</b> When\
    \ indexing all blocks, it is often useful to know\n  the index and hash of the\
    \ genesis block.</li>\n</ul>\n"
  name: Changelog
paths:
  /network/status:
    post:
      description: |
        This method returns the current status of the network the node knows about. This method also returns
        the methods, operation types, and operation statuses the node supports.
      operationId: networkStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkStatusRequest'
        description: |
          There are not any required fields in this request, yet. It is still specified
          as a `POST` request to ensure required fields can be added without requiring
          clients to change from a `GET`(which is currently more ideal) to a `POST` request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkStatusResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Network Status
      tags:
      - Network
  /block:
    post:
      description: |
        Get a block by its `Block Identifier`

        If transactions are returned in the same call to the node as fetching the block, the response should include these transactions
        in the `Block` object. If not, an array of `Transaction Identifiers` should be returned so `/block/transaction`
        fetches can be done to get all transaction information.
      operationId: block
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Block
      tags:
      - Block
  /block/transaction:
    post:
      description: "Get a transaction in a block by its `Transaction Identifier`\n\
        \n<b>This method should only be used when querying a node for a block does\
        \ not return all transactions contained within it.</b>\nAll transactions returned\
        \ by this method must be appended to any transactions returned by the `/block`\
        \ method by\nconsumers of this data. Fetching a transaction by hash is considered\
        \ an \"Explorer Method\" (which is classified \nunder the \"Future Work\"\
        \ section).\n\nCalling this method requires reference to a `BlockIdentifier`\
        \ because transaction parsing can change depending on which block\ncontains\
        \ the transaction. For example, in Bitcoin it is necessary to know which block\n\
        contains a transaction to determine the destination of fee payments. Without\
        \ specifying a block identifier, the node\nwould have to infer which block\
        \ to use (which could change during a re-org).\n\nImplementations that require\
        \ fetching previous transactions to populate the response (ex: Previous UTXOs\
        \ in Bitcoin) may find it\nuseful to run a cache within the Rosetta server\
        \ in the `/data` directory (on a path that does not conflict with the node).\n"
      operationId: blockTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockTransactionResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Block Transaction
      tags:
      - Block
  /mempool:
    post:
      description: Get all `Transaction Identifiers` in the mempool
      operationId: mempool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MempoolRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get All Mempool Transactions
      tags:
      - Mempool
  /mempool/transaction:
    post:
      description: |
        Get a transaction in the mempool by its `Transaction Identifier`.

        This is a separate request than fetching a block transaction (`/block/transaction`) because some blockchain nodes need to
        know that a transaction query is for something in the mempool instead of a transaction in a block.
      operationId: mempoolTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MempoolTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolTransactionResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Mempool Transaction
      tags:
      - Mempool
  /account/balance:
    post:
      description: |
        Get an array of all `Account Balances` for an `Account Identifier` and the `Block Identifier` at which the balance
        lookup was performed.

        Some consumers of account balance data need to know at which block the balance was calculated to reconcile account balance changes.

        To get all balances associated with an account, it may be necessary to perform multiple balance requests with unique
        `Account Identifier`s.

        If the client supports it, passing nil `AccountIdentifier` metadata to the request should fetch all balances.
      operationId: accountBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountBalanceRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get an Account Balance
      tags:
      - Account
  /construction/metadata:
    post:
      description: |
        Get any information required to construct a transaction for a specific account. Metadata returned here
        could be a recent hash to use or an account sequence number.

        It is important to clarify that this endpoint <b>should not pre-construct any transactions for the
        client</b>. All "account-specific" metadata must be returned as a key-value mapping so that
        transaction construction can be audited and performed entirely offline. Any "account-agnostic" metadata
        does not need to be broken out into a key-value mapping and can be returned as a blob.
      operationId: transactionConstruction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionConstructionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionConstructionResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Transaction Construction Metadata
      tags:
      - Construction
  /construction/submit:
    post:
      description: Submit a signed transaction in network-specific format
      operationId: transactionSubmit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionSubmitRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSubmitResponse'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Submit a Signed Transaction
      tags:
      - Construction
components:
  schemas:
    NetworkIdentifier:
      description: |
        The `network_identifier` specifies which network a particular object is associated with.
      example:
        blockchain: bitcoin
        sub_network_identifier:
          metadata:
            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          sub_network: shard 1
        network: mainnet
      properties:
        blockchain:
          example: bitcoin
          type: string
        network:
          example: mainnet
          type: string
        sub_network_identifier:
          $ref: '#/components/schemas/SubNetworkIdentifier'
      required:
      - blockchain
      - network
      type: object
    PartialNetworkIdentifier:
      description: |
        The `partial_network_identifier` specifies which network a particular object is associated with
        (excluding the `sub_network_identifier`). This identifier is used exclusively in `/network/status`.
      example:
        blockchain: bitcoin
        network: mainnet
      properties:
        blockchain:
          example: bitcoin
          type: string
        network:
          example: mainnet
          type: string
      required:
      - blockchain
      - network
      type: object
    SubNetworkIdentifier:
      description: |
        In blockchains with sharded state, the `sub_network_identifier` is required to wholly specify a shard block.
      example:
        metadata:
          producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        sub_network: shard 1
      properties:
        sub_network:
          example: shard 1
          type: string
        metadata:
          example:
            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
      required:
      - sub_network
      type: object
    BlockIdentifier:
      description: |
        The `block_identifier` uniquely identifies a block in a particular network.
      example:
        index: 1123941
        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        index:
          example: 1123941
          format: int64
          type: integer
        hash:
          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          type: string
      required:
      - hash
      - index
      type: object
    PartialBlockIdentifier:
      description: |
        When fetching data by `BlockIdentifier`, it may be possible to only specify the
        `index` or `hash`. If neither property is specified, it is assumed that the
        client is making a request at the current block.
      example:
        index: 1123941
        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        index:
          example: 1123941
          format: int64
          type: integer
        hash:
          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          type: string
      type: object
    TransactionIdentifier:
      description: |
        The `transaction_identifier` uniquely identifies a transaction in a particular network and block
        or in the mempool.
      example:
        hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        hash:
          example: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          type: string
      required:
      - hash
      type: object
    OperationIdentifier:
      description: |
        The `operation_identifier` uniquely identifies an operation within a transaction.
      example:
        index: 1
        network_index: 0
      properties:
        index:
          description: |
            The operation `index` is used to ensure each operation has a unique identifier within
            a transaction.

            To clarify, there may not be any notion of an operation index in the blockchain being described.
          example: 1
          format: int64
          minimum: 0
          type: integer
        network_index:
          description: |
            Some blockchains specify an operation index that is essential for client use. For example,
            Bitcoin uses a `network_index` to identify which UTXO was used in a transaction.

            `network_index` should not be populated if there is no notion of an operation index in a
            blockchain (typically most account-based blockchains).
          example: 0
          format: int64
          minimum: 0
          type: integer
      required:
      - index
      type: object
    AccountIdentifier:
      description: |
        The `account_identifier` uniquely identifies an account within a network.
      example:
        metadata: '{}'
        address: address
        sub_account:
          metadata: '{}'
          sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        address:
          description: |
            The `address` may be a cryptographic public key (or some encoding of it) or a provided username.
          type: string
        sub_account:
          $ref: '#/components/schemas/SubAccountIdentifier'
        metadata:
          description: |
            Blockchains that utilize a username model (where the address is not a derivative of a cryptographic
            public key) should specify the public key(s) owned by the address in metadata.
          type: object
      required:
      - address
      type: object
    SubAccountIdentifier:
      description: |
        An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance).
        The `sub_account_identifier` should specify which state (if applicable) the account instantiation refers to.
      example:
        metadata: '{}'
        sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        sub_account:
          example: 0x6b175474e89094c44da98b954eedeac495271d0f
          type: string
        metadata:
          type: object
      required:
      - sub_account
      type: object
    Block:
      example:
        metadata:
          transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          difficulty: "123891724987128947"
        parent_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        transactions:
        - metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        timestamp: 1582833600000
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        parent_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        timestamp:
          description: |
            The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in
            milliseconds because some blockchains produce blocks more often than once a second.
          example: 1582833600000
          format: int64
          minimum: 0
          type: integer
        transactions:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        metadata:
          example:
            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
            difficulty: "123891724987128947"
          type: object
      required:
      - block_identifier
      - parent_block_identifier
      - timestamp
      - transactions
      type: object
    Transaction:
      example:
        metadata:
          size: 12378
          lockTime: 1582272577
        operations:
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: -1238089899992
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          account:
            metadata: '{}'
            address: address
            sub_account:
              metadata: '{}'
              sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: -1238089899992
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          account:
            metadata: '{}'
            address: address
            sub_account:
              metadata: '{}'
              sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        metadata:
          description: |
            Transactions that are related to other transactions (like a cross-shard transactioin) should include
            the `tranaction_identifier` of these transactions in the metadata.
          example:
            size: 12378
            lockTime: 1582272577
          type: object
      required:
      - operations
      - transaction_identifier
      type: object
    Operation:
      example:
        amount:
          metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: -1238089899992
        metadata:
          asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
            03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
        related_operations:
        - index: 0
          operation_identifier:
            index: 0
        type: Transfer
        account:
          metadata: '{}'
          address: address
          sub_account:
            metadata: '{}'
            sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
        operation_identifier:
          index: 1
          network_index: 0
        status: Reverted
      properties:
        operation_identifier:
          $ref: '#/components/schemas/OperationIdentifier'
        related_operations:
          description: |
            Restrict referenced `related_operations` to identifier indexes `<` the current `operation_identifier.index`.
            This ensures there exists a clear DAG-structure of relations.

            Since `operations` are one-sided, one could imagine relating operations in a single transfer or linking
            `operations` in a call tree.
          example:
          - index: 0
            operation_identifier:
              index: 0
          items:
            $ref: '#/components/schemas/OperationIdentifier'
          type: array
        type:
          description: |
            The network-specific type of the operation. Ensure that any type that can be returned here is also
            specified in the `NetowrkStatus`. This can be very useful to downstream consumers that parse all
            block data.
          example: Transfer
          type: string
        status:
          description: |
            The network-specific status of the operation. Status is not defined on the transaction object
            because blockchains with smart contracts may have transactions that partially apply.

            Blockchains with atomic transactions (all operations succeed or all operations fail) will have
            the same `status` for each operation.
          example: Reverted
          type: string
        account:
          $ref: '#/components/schemas/AccountIdentifier'
        amount:
          $ref: '#/components/schemas/Amount'
        metadata:
          example:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          type: object
      required:
      - operation_identifier
      - status
      - type
      type: object
    Amount:
      example:
        metadata: '{}'
        currency:
          symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
        value: -1238089899992
      properties:
        value:
          description: |
            Value of the transaction in atomic units represented as an arbitrary-sized signed integer.

            For example, 1 BTC would be represented by a value of 100000000.
          example: -1238089899992
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        metadata:
          type: object
      required:
      - currency
      - value
      type: object
    Currency:
      example:
        symbol: BTC
        metadata:
          Issuer: Satoshi
        decimals: 8
      properties:
        symbol:
          description: |
            Canonical symbol associated with a currency.
          example: BTC
          type: string
        decimals:
          description: |
            Number of decimal places in the standard unit representation of the amount.

            For example, BTC has 8 decimals. Note that it is not possible to represent
            the value of some currency in atomic units that is not base 10.
          example: 8
          format: int32
          minimum: 0
          type: integer
        metadata:
          description: |
            Any additional information related to the currency itself.

            For example, it would be useful to populate this object with the contract address
            of an ERC-20 token.
          example:
            Issuer: Satoshi
          type: object
      required:
      - decimals
      - symbol
      type: object
    Balance:
      example:
        metadata:
          sequence_number: 23
        amounts:
        - metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: -1238089899992
        - metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: -1238089899992
        account_identifier:
          metadata: '{}'
          address: address
          sub_account:
            metadata: '{}'
            sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        amounts:
          description: |
            A single account may have a balance in multiple currencies.
          items:
            $ref: '#/components/schemas/Amount'
          type: array
        metadata:
          description: |
            Account-based blockchains that utilize a nonce or sequence number
            should include that number in the metadata. This number could be
            unique to the identifier or global across the account address.
          example:
            sequence_number: 23
          type: object
      required:
      - account_identifier
      - amounts
      type: object
    Peer:
      example:
        metadata: '{}'
        peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
      properties:
        peer_id:
          example: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: string
        metadata:
          type: object
      required:
      - peer_id
      type: object
    Version:
      example:
        metadata: '{}'
        rosetta_version: 1.2.3
        node_version: 1.0.2
        middleware_version: 1.2.7
      properties:
        rosetta_version:
          description: |
            The `rosetta_version` is the version of the Rosetta interface
            the implementation adheres to. This can be useful for clients
            looking to reliably parse responses.
          example: 1.2.3
          type: string
        node_version:
          description: |
            The `node_version` is the canonical version of the node
            runtime. This can help clients manage deployments.
          example: 1.0.2
          type: string
        middleware_version:
          description: |
            When a middleware server is used to adhere to the Rosetta
            interface, it should return its version here. This can help
            clients manage deployments.
          example: 1.2.7
          type: string
        metadata:
          description: |
            Any other information that may be useful about versioning
            of dependent services should be returned here.
          type: object
      required:
      - node_version
      - rosetta_version
      type: object
    NetworkInformation:
      example:
        current_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        peers:
        - metadata: '{}'
          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        - metadata: '{}'
          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        current_block_timestamp: 1582833600000
        genesis_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        current_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        current_block_timestamp:
          description: |
            The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in
            milliseconds because some blockchains produce blocks more often than once a second.
          example: 1582833600000
          format: int64
          minimum: 0
          type: integer
        genesis_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        peers:
          items:
            $ref: '#/components/schemas/Peer'
          type: array
      required:
      - current_block_identifier
      - current_block_timestamp
      - genesis_block_identifier
      - peers
      type: object
    NetworkStatus:
      example:
        network_information:
          current_block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          peers:
          - metadata: '{}'
            peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          - metadata: '{}'
            peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          current_block_timestamp: 1582833600000
          genesis_block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        network_identifier:
          blockchain: bitcoin
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/PartialNetworkIdentifier'
        network_information:
          $ref: '#/components/schemas/NetworkInformation'
      required:
      - network_identifier
      - network_information
      type: object
    SubNetworkStatus:
      example:
        network_information:
          current_block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          peers:
          - metadata: '{}'
            peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          - metadata: '{}'
            peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          current_block_timestamp: 1582833600000
          genesis_block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        sub_network_identifier:
          metadata:
            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          sub_network: shard 1
      properties:
        sub_network_identifier:
          $ref: '#/components/schemas/SubNetworkIdentifier'
        network_information:
          $ref: '#/components/schemas/NetworkInformation'
      required:
      - network_information
      - sub_network_identifier
      type: object
    Options:
      description: |
        The `options` object contains the `methods`, `operation_statuses`,
        and `operation_types` supported by this Rosetta implementation.

        It is important to keep these updated across changes because they are
        used by clients to validate your implementation (ex: are there any
        unexpected `operation_statuses`).
      example:
        operation_types:
        - TRANSFER
        - TRANSFER
        methods:
        - /account/transactions
        - /account/transactions
        operation_statuses:
        - SUCCESS
        - SUCCESS
      properties:
        methods:
          description: |
            All methods that this implementation supports.
          items:
            example: /account/transactions
            type: string
          type: array
        operation_statuses:
          description: |
            All `Operation` status that this implementation supports. Any status
            that is returnede during parsing that is not listed here could cause
            consumers to error.
          items:
            example: SUCCESS
            type: string
          type: array
        operation_types:
          description: |
            All `Operation` types that this implementation supports. Any type
            that is returned during parsing that is not listed here could cause
            consumers to error.
          items:
            example: TRANSFER
            type: string
          type: array
      required:
      - methods
      - operation_statuses
      - operation_types
      type: object
    Timestamp:
      description: |
        The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in
        milliseconds because some blockchains produce blocks more often than once a second.
      example: 1582833600000
      format: int64
      minimum: 0
      type: integer
    BlockRequest:
      example:
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/PartialBlockIdentifier'
      required:
      - block_identifier
      - network_identifier
      type: object
    BlockResponse:
      example:
        block:
          metadata:
            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
            difficulty: "123891724987128947"
          parent_block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          transactions:
          - metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: -1238089899992
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              account:
                metadata: '{}'
                address: address
                sub_account:
                  metadata: '{}'
                  sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: -1238089899992
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              account:
                metadata: '{}'
                address: address
                sub_account:
                  metadata: '{}'
                  sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          - metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: -1238089899992
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              account:
                metadata: '{}'
                address: address
                sub_account:
                  metadata: '{}'
                  sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: -1238089899992
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              account:
                metadata: '{}'
                address: address
                sub_account:
                  metadata: '{}'
                  sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          timestamp: 1582833600000
        other_transactions:
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        block:
          $ref: '#/components/schemas/Block'
        other_transactions:
          description: |
            Some blockchains may require additional transactions to be fetched that weren't returned in the block response
            (ex: block only returns transaction hashes). For blockchains with a lot of transactions in each block, this
            can be very useful as consumers can concurrently fetch all transactions returned.
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
          type: array
      required:
      - block
      type: object
    BlockTransactionRequest:
      example:
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      required:
      - block_identifier
      - network_identifier
      - transaction_identifier
      type: object
    BlockTransactionResponse:
      example:
        transaction:
          metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
      required:
      - transaction
      type: object
    MempoolRequest:
      example:
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
      required:
      - network_identifier
      type: object
    MempoolResponse:
      example:
        transaction_identifiers:
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction_identifiers:
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
          type: array
      required:
      - transaction_identifiers
      type: object
    MempoolTransactionRequest:
      example:
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      required:
      - network_identifier
      - transaction_identifier
      type: object
    MempoolTransactionResponse:
      example:
        metadata:
          descendant_fees: 123923
          ancestor_count: 2
        transaction:
          metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: -1238089899992
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            account:
              metadata: '{}'
              address: address
              sub_account:
                metadata: '{}'
                sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        metadata:
          example:
            descendant_fees: 123923
            ancestor_count: 2
          type: object
      required:
      - transaction
      type: object
    TransactionConstructionRequest:
      example:
        method: method
        account_identifier:
          metadata: '{}'
          address: address
          sub_account:
            metadata: '{}'
            sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        method:
          description: |
            Some blockchains require different metadata for different types of transaction
            construction (ex: delegation versus a transfer).

            Instead of requiring a blockchain node to return all possible types of metadata
            for construction (which may require multiple node fetches), the client can specify
            a `method` to limit the metadata returned to only the subset required.
          type: string
      required:
      - account_identifier
      - network_identifier
      type: object
    TransactionConstructionResponse:
      example:
        metadata:
          account_sequence: 23
          recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        suggested_fee:
          metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: -1238089899992
      properties:
        suggested_fee:
          $ref: '#/components/schemas/Amount'
        metadata:
          example:
            account_sequence: 23
            recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
      required:
      - suggested_fee
      type: object
    TransactionSubmitRequest:
      example:
        signed_transaction: signed_transaction
      properties:
        signed_transaction:
          type: string
      required:
      - signed_transaction
      type: object
    TransactionSubmitResponse:
      example:
        metadata: '{}'
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        status: memSuccess
      properties:
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        status:
          description: Network-specific transaction submission status
          example: memSuccess
          type: string
        metadata:
          type: object
      required:
      - status
      - transaction_identifier
      type: object
    AccountBalanceRequest:
      example:
        account_identifier:
          metadata: '{}'
          address: address
          sub_account:
            metadata: '{}'
            sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
      required:
      - account_identifier
      - network_identifier
      type: object
    AccountBalanceResponse:
      example:
        balances:
        - metadata:
            sequence_number: 23
          amounts:
          - metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: -1238089899992
          - metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: -1238089899992
          account_identifier:
            metadata: '{}'
            address: address
            sub_account:
              metadata: '{}'
              sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
        - metadata:
            sequence_number: 23
          amounts:
          - metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: -1238089899992
          - metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: -1238089899992
          account_identifier:
            metadata: '{}'
            address: address
            sub_account:
              metadata: '{}'
              sub_account: 0x6b175474e89094c44da98b954eedeac495271d0f
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        balances:
          description: |
            A GetAccountBalanceResponse may include multiple uniquely-identified
            balances. For example, the balance of an account on each shard
            could be returned or the balance of an account on each ERC-20 contract.
          items:
            $ref: '#/components/schemas/Balance'
          type: array
      required:
      - balances
      - block_identifier
      type: object
    NetworkStatusRequest:
      example:
        metadata: '{}'
      properties:
        metadata:
          type: object
      type: object
    NetworkStatusResponse:
      example:
        metadata:
          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        sub_network_status:
        - network_information:
            current_block_identifier:
              index: 1123941
              hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
            peers:
            - metadata: '{}'
              peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            - metadata: '{}'
              peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            current_block_timestamp: 1582833600000
            genesis_block_identifier:
              index: 1123941
              hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
        - network_information:
            current_block_identifier:
              index: 1123941
              hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
            peers:
            - metadata: '{}'
              peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            - metadata: '{}'
              peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            current_block_timestamp: 1582833600000
            genesis_block_identifier:
              index: 1123941
              hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            sub_network: shard 1
        options:
          operation_types:
          - TRANSFER
          - TRANSFER
          methods:
          - /account/transactions
          - /account/transactions
          operation_statuses:
          - SUCCESS
          - SUCCESS
        network_status:
          network_information:
            current_block_identifier:
              index: 1123941
              hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
            peers:
            - metadata: '{}'
              peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            - metadata: '{}'
              peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            current_block_timestamp: 1582833600000
            genesis_block_identifier:
              index: 1123941
              hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          network_identifier:
            blockchain: bitcoin
            network: mainnet
        version:
          metadata: '{}'
          rosetta_version: 1.2.3
          node_version: 1.0.2
          middleware_version: 1.2.7
      properties:
        network_status:
          $ref: '#/components/schemas/NetworkStatus'
        sub_network_status:
          description: |
            If a node supports multiple sub-networks, their statuses should
            be returned in this array.
          items:
            $ref: '#/components/schemas/SubNetworkStatus'
          type: array
        version:
          $ref: '#/components/schemas/Version'
        options:
          $ref: '#/components/schemas/Options'
        metadata:
          example:
            peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
      required:
      - network_status
      - options
      - version
      type: object
    Error:
      properties:
        code:
          format: int32
          minimum: 0
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
x-tagGroups:
- name: Components
  tags:
  - Automated Node Deployment
  - RPC Service Interface
  - Future Work
- name: Schema
  tags:
  - Objects
  - Object Identifiers
  - Changelog
- name: Methods
  tags:
  - Network
  - Block
  - Mempool
  - Account
  - Construction
