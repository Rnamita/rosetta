/*
 * Rosetta
 *
 * A standard for blockchain interaction
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"fmt"
	"math/big"

	admin "github.com/celo-org/rosetta/celo/client/admin"
	network "github.com/celo-org/rosetta/celo/client/network"
	"github.com/ethereum/go-ethereum/core/types"
	eth "github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/p2p"
	"github.com/ethereum/go-ethereum/rpc"
)

// NetworkApiService is a service that implents the logic for the NetworkApiServicer
// This service should implement the business logic for every endpoint for the NetworkApi API.
// Include any external packages or services that will be required by this service.
type NetworkApiService struct {
	adminClient   *admin.AdminClient
	networkClient *network.NetworkClient
	ethClient     *eth.Client
}

// NewNetworkApiService creates a default api service
func NewNetworkApiService(rpcClient *rpc.Client) NetworkApiServicer {
	return &NetworkApiService{
		adminClient:   admin.NewClient(rpcClient),
		networkClient: network.NewClient(rpcClient),
		ethClient:     eth.NewClient(rpcClient),
	}
}

func blockIdentifierFromHeader(header *types.Header) BlockIdentifier {
	return BlockIdentifier{
		Index: header.Number.Int64(),
		Hash:  header.Hash().Hex(),
	}
}

func networkNameFromId(id *big.Int) string {
	uid := id.Uint64()
	if name, ok := ChainIdToNetwork[uid]; ok {
		return name
	}
	return fmt.Sprintf("unknown %d", uid)
}

func peersFromInfo(peersInfo *[]p2p.PeerInfo) []Peer {
	peers := make([]Peer, len(*peersInfo))
	for i, peerInfo := range *peersInfo {
		peers[i].PeerId = peerInfo.ID
	}
	return peers
}

func buildErrorResponse(code int32, err error) Error {
	return Error{
		Code:    code,
		Message: err.Error(),
	}
}

// NetworkStatus - Get Network Status
func (s *NetworkApiService) NetworkStatus(networkStatusRequest NetworkStatusRequest) (interface{}, error) {
	ctx := context.Background()

	networkId, err := s.networkClient.NetworkId(ctx)
	if err != nil {
		return buildErrorResponse(1, err), nil
	}

	latestHeader, err := s.ethClient.HeaderByNumber(ctx, nil) // nil == latest
	if err != nil {
		return buildErrorResponse(2, err), nil
	}

	genesisHeader, err := s.ethClient.HeaderByNumber(ctx, big.NewInt(0)) // 0 == genesis
	if err != nil {
		return buildErrorResponse(3, err), nil
	}

	peersInfo, err := s.adminClient.Peers(ctx)
	if err != nil {
		return buildErrorResponse(4, err), nil
	}

	response := NetworkStatusResponse{
		NetworkStatus: NetworkStatus{
			NetworkIdentifier: PartialNetworkIdentifier{
				Blockchain: BlockchainName,
				Network:    networkNameFromId(networkId),
			},
			NetworkInformation: NetworkInformation{
				CurrentBlockIdentifier: blockIdentifierFromHeader(latestHeader),
				CurrentBlockTimestamp:  int64(latestHeader.Time),
				GenesisBlockIdentifier: blockIdentifierFromHeader(genesisHeader),
				Peers:                  peersFromInfo(peersInfo),
			},
		},
		SubNetworkStatus: []SubNetworkStatus{},
		Version: Version{
			RosettaVersion:    RosettaVersion,
			NodeVersion:       NodeVersion,
			MiddlewareVersion: MiddlewareVersion,
		},
		// TODO: implement
		Options: Options{
			Methods:           []string{},
			OperationStatuses: []string{},
			OperationTypes:    []string{},
		},
		Metadata: map[string]interface{}{},
	}
	return response, nil
}
