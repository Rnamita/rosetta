/*
 * Rosetta
 *
 * A standard for blockchain interaction
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"math/big"

	"github.com/celo-org/rosetta/celo/client"
)

// NetworkApiService is a service that implents the logic for the NetworkApiServicer
// This service should implement the business logic for every endpoint for the NetworkApi API.
// Include any external packages or services that will be required by this service.
type NetworkApiService struct {
	celoClient *client.CeloClient
}

// NewNetworkApiService creates a default api service
func NewNetworkApiService(celoClient *client.CeloClient) NetworkApiServicer {
	return &NetworkApiService{
		celoClient: celoClient,
	}
}

// NetworkStatus - Get Network Status
func (s *NetworkApiService) NetworkStatus(networkStatusRequest NetworkStatusRequest) (interface{}, error) {
	ctx := context.Background()

	chainId, err := s.celoClient.Net.ChainId(ctx)
	if err != nil {
		return BuildErrorResponse(1, err), nil
	}

	latestHeader, err := s.celoClient.Eth.HeaderByNumber(ctx, nil) // nil == latest
	if err != nil {
		return BuildErrorResponse(2, err), nil
	}

	genesisHeader, err := s.celoClient.Eth.HeaderByNumber(ctx, big.NewInt(0)) // 0 == genesis
	if err != nil {
		return BuildErrorResponse(3, err), nil
	}

	peersInfo, err := s.celoClient.Admin.Peers(ctx)
	if err != nil {
		return BuildErrorResponse(4, err), nil
	}

	response := NetworkStatusResponse{
		NetworkStatus: NetworkStatus{
			NetworkIdentifier: PartialNetworkIdentifier{
				Blockchain: BlockchainName,
				Network:    NetworkNameFromId(chainId),
			},
			NetworkInformation: NetworkInformation{
				CurrentBlockIdentifier: *HeaderToBlockIdentifier(latestHeader),
				CurrentBlockTimestamp:  int64(latestHeader.Time),
				GenesisBlockIdentifier: *HeaderToBlockIdentifier(genesisHeader),
				Peers:                  PeersFromInfo(peersInfo),
			},
		},
		SubNetworkStatus: []SubNetworkStatus{},
		Version: Version{
			RosettaVersion:    RosettaVersion,
			NodeVersion:       NodeVersion,
			MiddlewareVersion: MiddlewareVersion,
		},
		// TODO: implement
		Options: Options{
			Methods:           []string{},
			OperationStatuses: []OperationStatus{},
			OperationTypes:    []string{},
		},
		Metadata: map[string]interface{}{},
	}
	return response, nil
}
