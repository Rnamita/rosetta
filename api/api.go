/*
 * Rosetta
 *
 * A standard for blockchain interaction
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"
)


// AccountApiRouter defines the required methods for binding the api requests to a responses for the AccountApi
// The AccountApiRouter implementation should parse necessary information from the http request, 
// pass the data to a AccountApiServicer to perform the required actions, then write the service results to the http response.
type AccountApiRouter interface { 
	AccountBalance(http.ResponseWriter, *http.Request)
}
// BlockApiRouter defines the required methods for binding the api requests to a responses for the BlockApi
// The BlockApiRouter implementation should parse necessary information from the http request, 
// pass the data to a BlockApiServicer to perform the required actions, then write the service results to the http response.
type BlockApiRouter interface { 
	Block(http.ResponseWriter, *http.Request)
	BlockTransaction(http.ResponseWriter, *http.Request)
}
// ConstructionApiRouter defines the required methods for binding the api requests to a responses for the ConstructionApi
// The ConstructionApiRouter implementation should parse necessary information from the http request, 
// pass the data to a ConstructionApiServicer to perform the required actions, then write the service results to the http response.
type ConstructionApiRouter interface { 
	TransactionConstruction(http.ResponseWriter, *http.Request)
	TransactionSubmit(http.ResponseWriter, *http.Request)
}
// MempoolApiRouter defines the required methods for binding the api requests to a responses for the MempoolApi
// The MempoolApiRouter implementation should parse necessary information from the http request, 
// pass the data to a MempoolApiServicer to perform the required actions, then write the service results to the http response.
type MempoolApiRouter interface { 
	Mempool(http.ResponseWriter, *http.Request)
	MempoolTransaction(http.ResponseWriter, *http.Request)
}
// NetworkApiRouter defines the required methods for binding the api requests to a responses for the NetworkApi
// The NetworkApiRouter implementation should parse necessary information from the http request, 
// pass the data to a NetworkApiServicer to perform the required actions, then write the service results to the http response.
type NetworkApiRouter interface { 
	NetworkStatus(http.ResponseWriter, *http.Request)
}


// AccountApiServicer defines the api actions for the AccountApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type AccountApiServicer interface { 
	AccountBalance(AccountBalanceRequest) (interface{}, error)
}


// BlockApiServicer defines the api actions for the BlockApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type BlockApiServicer interface { 
	Block(BlockRequest) (interface{}, error)
	BlockTransaction(BlockTransactionRequest) (interface{}, error)
}


// ConstructionApiServicer defines the api actions for the ConstructionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type ConstructionApiServicer interface { 
	TransactionConstruction(TransactionConstructionRequest) (interface{}, error)
	TransactionSubmit(TransactionSubmitRequest) (interface{}, error)
}


// MempoolApiServicer defines the api actions for the MempoolApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type MempoolApiServicer interface { 
	Mempool(MempoolRequest) (interface{}, error)
	MempoolTransaction(MempoolTransactionRequest) (interface{}, error)
}


// NetworkApiServicer defines the api actions for the NetworkApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type NetworkApiServicer interface { 
	NetworkStatus(NetworkStatusRequest) (interface{}, error)
}
