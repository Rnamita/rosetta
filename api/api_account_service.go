/*
 * Rosetta
 *
 * A standard for blockchain interaction
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"

	"github.com/celo-org/rosetta/contract"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	eth "github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/rpc"
)

// AccountApiService is a service that implents the logic for the AccountApiServicer
// This service should implement the business logic for every endpoint for the AccountApi API.
// Include any external packages or services that will be required by this service.
type AccountApiService struct {
	ethClient       *eth.Client
	contractManager *contract.ContractManager
}

// NewAccountApiService creates a default api service
func NewAccountApiService(rpcClient *rpc.Client, contractManager *contract.ContractManager) AccountApiServicer {
	return &AccountApiService{
		ethClient:       eth.NewClient(rpcClient),
		contractManager: contractManager,
	}
}

// AccountBalance - Get an Account Balance
func (s *AccountApiService) AccountBalance(accountBalanceRequest AccountBalanceRequest) (interface{}, error) {
	address := common.HexToAddress(accountBalanceRequest.AccountIdentifier.Address)

	ctx := context.Background()
	latestHeader, err := s.ethClient.HeaderByNumber(ctx, nil) // nil == latest
	if err != nil {
		return BuildErrorResponse(0, err), nil
	}

	goldBalance, err := s.ethClient.BalanceAt(ctx, address, latestHeader.Number)
	if err != nil {
		return BuildErrorResponse(1, err), nil
	}
	// stableTokenAddr, err := registry.GetAddressForString(&bind.CallOpts{
	// 	BlockNumber: latestHeader.Number,
	// 	Context:     ctx,
	// }, StableTokenRegistryId)
	// if err != nil {
	// 	return BuildErrorResponse(6, err), nil
	// }

	// stableToken, err := contract.NewStableToken(stableTokenAddr, s.ethClient)
	// if err != nil {
	// 	return BuildErrorResponse(7, err), nil
	// }

	// stableTokenBalance, err := stableToken.BalanceOf(&bind.CallOpts{
	// 	BlockNumber: latestHeader.Number,
	// 	Context:     ctx,
	// }, address)
	// if err != nil {
	// 	return BuildErrorResponse(8, err), nil
	// }

	s.contractManager.RwMutex.RLock()
	lockedGoldBalance, err := s.contractManager.LockedGold.GetAccountTotalLockedGold(&bind.CallOpts{
		BlockNumber: latestHeader.Number,
		Context:     ctx,
	}, address)
	if err != nil {
		// TODO: err
	}
	s.contractManager.RwMutex.RUnlock()

	response := AccountBalanceResponse{
		BlockIdentifier: BlockIdentifierFromHeader(latestHeader),
		Balances: []Balance{
			Balance{
				AccountIdentifier: AccountIdentifier{
					Address: address.String(),
				},
				Amounts: []Amount{
					Amount{
						Value:    goldBalance.String(),
						Currency: CeloGold,
					},
					// Amount{
					// 	Value:    stableTokenBalance.String(),
					// 	Currency: CeloDollar,
					// },
				},
			},
			Balance{
				AccountIdentifier: AccountIdentifier{
					Address: address.String(),
					SubAccount: SubAccountIdentifier{
						SubAccount: contract.LockedGoldName,
					},
				},
				Amounts: []Amount{
					Amount{
						Value:    lockedGoldBalance.String(),
						Currency: CeloGold,
					},
				},
			},
		},
	}
	return response, nil
}
