{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/ethereum/go-ethereum/log"
)

// A {{classname}}Controller binds http requests to an api service and writes the service results to the http response
type {{classname}}Controller struct {
	service {{classname}}Servicer
}

// New{{classname}}Controller creates a default api controller
func New{{classname}}Controller(s {{classname}}Servicer) Router {
	return &{{classname}}Controller{ service: s }
}

// Routes returns all of the api route for the {{classname}}Controller
func (c *{{classname}}Controller) Routes() Routes {
	return Routes{ {{#operations}}{{#operation}}
		{
			"{{operationId}}",
			http.Method{{httpMethod}},
			"{{{basePathWithoutHost}}}{{{path}}}",
			c.{{operationId}},
		},{{/operation}}{{/operations}}
	}
}{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
func (c *{{classname}}Controller) {{nickname}}(w http.ResponseWriter, r *http.Request) { {{#allParams}}{{#isBodyParam}}
	{{paramName}} := &{{dataType}}{}
	if err := json.NewDecoder(r.Body).Decode(&{{paramName}}); err != nil {
		BadRequest(w, NewValidationError("{{paramName}}", err))
		return
	}
	{{/isBodyParam}}{{/allParams}}
	result, err := c.service.{{nickname}}(r.Context(), {{#allParams}}{{#isBodyParam}}*{{/isBodyParam}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
	if err != nil {
		log.Error("RequestError", "err", err)
		w.WriteHeader(500)
		return
	}
	
	JSONResponse(result, http.StatusOK, w)
}{{/operation}}{{/operations}}
