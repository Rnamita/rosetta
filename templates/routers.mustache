{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/ethereum/go-ethereum/log"
    {{#featureCORS}}
	"github.com/gorilla/handlers"
    {{/featureCORS}}
	"github.com/gorilla/mux"
)

// A Route defines the parameters for an api endpoint
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Routes are a collection of defined api endpoints
type Routes []Route

// Router defines the required methods for retrieving api routes
type Router interface { 
	Routes() Routes
}

// NewRouter creates a new router for any number of api routers
func NewRouter(routers ...Router) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, api := range routers {
		for _, route := range api.Routes() {
			var handler http.Handler
			handler = route.HandlerFunc
            {{#featureCORS}}
			handler = handlers.CORS()(handler)
            {{/featureCORS}}

			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
	}

	return router
}

// JSONResponse uses the json encoder to write an interface to the http response with an optional status code
func JSONResponse(i interface{}, status int, w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(status)
	if err := json.NewEncoder(w).Encode(i); err != nil {
		log.Error("Error encoding json response", "err", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}
