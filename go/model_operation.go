/*
 * Rosetta
 *
 * <h2>Backstory</h2> Writing reliable blockchain integrations is complicated and time-consuming. The process requires careful analysis of the unique aspects of each blockchain and extensive communication with its developers to understand the best strategies to deploy nodes, recognize deposits, broadcast transactions, etc. Even a minor misunderstanding can lead to downtime, or even worse, incorrect fund attribution. Not to mention, this integration must be continuously modified and tested each time a blockchain team releases new software.  Instead of spending time working on their blockchain, project developers spend countless hours answering similar support questions for each team integrating their blockchain. With their questions answered, each integrating team then writes similar code to interface with the blockchain instead of spending their engineering resources adding support for more blockchain projects or working on unique products and applications.  <h2>A Standard for Blockchain Interaction</h2> Rosetta is a new project from Coinbase to standardize the process of deploying and interacting with blockchains. With an explicit specification to adhere to, all parties involved in blockchain development can spend less time figuring out how to integrate with each other and more time working on the novel advances that will push the blockchain ecosystem forward. In practice, this means that any blockchain project that implements the requirements outlined in this specification will enable exchanges, block explorers, and wallets to integrate with much less communication overhead and network-specific work.  <h5>Â© 2020 Coinbase</h5> 
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Operation struct {

	OperationIdentifier OperationIdentifier `json:"operation_identifier"`

	// Restrict referenced `related_operations` to identifier indexes `<` the current `operation_identifier.index`. This ensures there exists a clear DAG-structure of relations.  Since `operations` are one-sided, one could imagine relating operations in a single transfer or linking `operations` in a call tree. 
	RelatedOperations []OperationIdentifier `json:"related_operations,omitempty"`

	// The network-specific type of the operation. Ensure that any type that can be returned here is also specified in the `NetowrkStatus`. This can be very useful to downstream consumers that parse all block data. 
	Type string `json:"type"`

	// The network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply.  Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same `status` for each operation. 
	Status string `json:"status"`

	Account AccountIdentifier `json:"account,omitempty"`

	Amount Amount `json:"amount,omitempty"`

	Metadata map[string]interface{} `json:"metadata,omitempty"`
}
